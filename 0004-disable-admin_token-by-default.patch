From 12f1e72ddbbbfa625d29434a5e1c758c52c5cb3c Mon Sep 17 00:00:00 2001
From: Alberto Murillo <alberto.murillo.silva@intel.com>
Date: Tue, 30 Jun 2015 08:45:46 -0500
Subject: [PATCH] disable admin_token by default

Documentation[1] highly recommends to edit paste.ini but this is bad[2]
Instead, users should be able to simply remove or comment out admin_token
in keystone.conf

[1] http://docs.openstack.org/developer/keystone/configuringservices.html#admin-token
[2] paste.ini contains code paths so must be treated as "code"
which could change on upgrades vs configuration which must stay backward
compatible across releases
---
 keystone/common/config.py              | 10 ++++------
 keystone/middleware/core.py            |  5 +++--
 keystone/tests/unit/test_middleware.py |  4 ++++
 keystone/tests/unit/test_v2.py         |  1 +
 keystone/tests/unit/test_v3.py         |  4 ++++
 keystone/tests/unit/test_v3_auth.py    |  8 ++++++++
 6 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/keystone/common/config.py b/keystone/common/config.py
index e5d3538..a312d55 100644
--- a/keystone/common/config.py
+++ b/keystone/common/config.py
@@ -25,14 +25,12 @@ _SSO_CALLBACK = '/etc/keystone/sso_callback_template.html'
 
 FILE_OPTIONS = {
     None: [
-        cfg.StrOpt('admin_token', secret=True, default='ADMIN',
+        cfg.StrOpt('admin_token', secret=True,
                    help='A "shared secret" that can be used to bootstrap '
                         'Keystone. This "token" does not represent a user, '
-                        'and carries no explicit authorization. To disable '
-                        'in production (highly recommended), remove '
-                        'AdminTokenAuthMiddleware from your paste '
-                        'application pipelines (for example, in '
-                        'keystone-paste.ini).'),
+                        'and carries no explicit authorization. It is '
+                        'highly recommended to keep it disabled in '
+                        'production.'),
         cfg.StrOpt('public_endpoint',
                    help='The base public endpoint URL for Keystone that is '
                         'advertised to clients (NOTE: this does NOT affect '
diff --git a/keystone/middleware/core.py b/keystone/middleware/core.py
index 75be5b2..2cd4bac 100644
--- a/keystone/middleware/core.py
+++ b/keystone/middleware/core.py
@@ -71,7 +71,8 @@ class AdminTokenAuthMiddleware(wsgi.Middleware):
     def process_request(self, request):
         token = request.headers.get(AUTH_TOKEN_HEADER)
         context = request.environ.get(CONTEXT_ENV, {})
-        context['is_admin'] = (token == CONF.admin_token)
+        context['is_admin'] = (CONF.admin_token is not None
+                               and token == CONF.admin_token)
         request.environ[CONTEXT_ENV] = context
 
 
@@ -176,7 +177,7 @@ class AuthContextMiddleware(wsgi.Middleware):
     def _build_auth_context(self, request):
         token_id = request.headers.get(AUTH_TOKEN_HEADER).strip()
 
-        if token_id == CONF.admin_token:
+        if (CONF.admin_token is not None and token_id == CONF.admin_token):
             # NOTE(gyee): no need to proceed any further as the special admin
             # token is being handled by AdminTokenAuthMiddleware. This code
             # will not be impacted even if AdminTokenAuthMiddleware is removed
diff --git a/keystone/tests/unit/test_middleware.py b/keystone/tests/unit/test_middleware.py
index 0eedb9c..4d6d70e 100644
--- a/keystone/tests/unit/test_middleware.py
+++ b/keystone/tests/unit/test_middleware.py
@@ -51,6 +51,10 @@ def make_response(**kwargs):
 
 
 class TokenAuthMiddlewareTest(unit.TestCase):
+    def config_overrides(self):
+        super(AdminTokenAuthMiddlewareTest, self).config_overrides()
+        self.config_fixture.config(admin_token='ADMIN')
+
     def test_request(self):
         req = make_request()
         req.headers[middleware.AUTH_TOKEN_HEADER] = 'MAGIC'
diff --git a/keystone/tests/unit/test_v2.py b/keystone/tests/unit/test_v2.py
index acdfca5..08b789a 100644
--- a/keystone/tests/unit/test_v2.py
+++ b/keystone/tests/unit/test_v2.py
@@ -1416,6 +1416,7 @@ class TestFernetTokenProviderV2(RestfulTestCase):
     def config_overrides(self):
         super(TestFernetTokenProviderV2, self).config_overrides()
         self.config_fixture.config(group='token', provider='fernet')
+        self.config_fixture.config(admin_token='ADMIN')
 
     def test_authenticate_unscoped_token(self):
         unscoped_token = self.get_unscoped_token()
diff --git a/keystone/tests/unit/test_v3.py b/keystone/tests/unit/test_v3.py
index 32c5e29..1f77869 100644
--- a/keystone/tests/unit/test_v3.py
+++ b/keystone/tests/unit/test_v3.py
@@ -1185,6 +1185,10 @@ class VersionTestCase(RestfulTestCase):
 # NOTE(gyee): test AuthContextMiddleware here instead of test_middleware.py
 # because we need the token
 class AuthContextMiddlewareTestCase(RestfulTestCase):
+    def config_overrides(self):
+        super(AuthContextMiddlewareTestCase, self).config_overrides()
+        self.config_fixture.config(admin_token='ADMIN')
+
     def _mock_request_object(self, token_id):
 
         class fake_req(object):
diff --git a/keystone/tests/unit/test_v3_auth.py b/keystone/tests/unit/test_v3_auth.py
index d53a85d..2007899 100644
--- a/keystone/tests/unit/test_v3_auth.py
+++ b/keystone/tests/unit/test_v3_auth.py
@@ -115,6 +115,10 @@ class TestAuthInfo(test_v3.AuthTestMixin, testcase.TestCase):
 
 
 class TokenAPITests(object):
+    def config_overrides(self):
+        super(TokenAPITests, self).config_overrides()
+        self.config_fixture.config(admin_token='ADMIN')
+
     # Why is this not just setUp? Because TokenAPITests is not a test class
     # itself. If TokenAPITests became a subclass of the testcase, it would get
     # called by the enumerate-tests-in-file code. The way the functions get
@@ -506,6 +510,7 @@ class TestPKITokenAPIs(test_v3.RestfulTestCase, TokenAPITests):
     def config_overrides(self):
         super(TestPKITokenAPIs, self).config_overrides()
         self.config_fixture.config(group='token', provider='pki')
+        self.config_fixture.config(admin_token='ADMIN')
 
     def setUp(self):
         super(TestPKITokenAPIs, self).setUp()
@@ -567,6 +572,7 @@ class TestPKIZTokenAPIs(TestPKITokenAPIs):
     def config_overrides(self):
         super(TestPKIZTokenAPIs, self).config_overrides()
         self.config_fixture.config(group='token', provider='pkiz')
+        self.config_fixture.config(admin_token='ADMIN')
 
     def verify_token(self, *args, **kwargs):
         return cms.pkiz_verify(*args, **kwargs)
@@ -576,6 +582,7 @@ class TestUUIDTokenAPIs(test_v3.RestfulTestCase, TokenAPITests):
     def config_overrides(self):
         super(TestUUIDTokenAPIs, self).config_overrides()
         self.config_fixture.config(group='token', provider='uuid')
+        self.config_fixture.config(admin_token='ADMIN')
 
     def setUp(self):
         super(TestUUIDTokenAPIs, self).setUp()
@@ -3180,6 +3187,7 @@ class TestTrustAuth(test_v3.RestfulTestCase):
             provider='pki',
             revoke_by_id=False)
         self.config_fixture.config(group='trust', enabled=True)
+        self.config_fixture.config(admin_token='ADMIN')
 
     def setUp(self):
         super(TestTrustAuth, self).setUp()
-- 
2.4.3

